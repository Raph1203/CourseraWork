--We are running an experiment at an item-level, which means all users who visit will see the same page, but the layout of different item pages may differ.
--Compare this table to the assignment events we captured for user_level_testing.
--Does this table have everything you need to compute metrics like 30-day view-binary?

SELECT 
  * 
FROM 
  dsv1069.final_assignments_qa
  
-- No. We are still missing the date when the date of the assignment

--Reformat the final_assignments_qa to look like the final_assignments table, filling in any missing values with a placeholder of the appropriate data type.
SELECT
  item_id,
  CASE test_letter
    WHEN 'test_a' THEN test_a
    WHEN 'test_b' THEN test_b
    WHEN 'test_c' THEN test_c
    WHEN 'test_d' THEN test_d
    WHEN 'test_e' THEN test_e
    WHEN 'test_f' THEN test_f
    ELSE NULL END
    AS test_assignment,
    tests.*,
  NULL as test_start_date
FROM
dsv1069.final_assignments_qa
CROSS JOIN
(SELECT 
  test_letter
FROM 
 (VALUES
    ('test_a'),
    ('test_b'),
    ('test_c'),
    ('test_d'),
    ('test_e'),
    ('test_f')) v(test_letter)
  ) tests
 
-- Use this table to 
-- compute order_binary for the 30 day window after the test_start_date
-- for the test named item_test_2
SELECT 
  test_assignment,
  COUNT(item_id)            AS items, 
  SUM(order_binary)         AS orders,
  SUM(order_binary_30d)     AS orders_30d
FROM 
(
  SELECT
    assignment.item_id,
    assignment.test_assignment,
    MAX(CASE WHEN orders.paid_at > assignment.test_start_date THEN 1 ELSE 0 END) AS order_binary,
    MAX(CASE WHEN (orders.paid_at > assignment.test_start_date 
                  AND DATE_PART('day', orders.paid_at - assignment.test_start_date) <= 30)
               THEN 1 ELSE 0 END)  AS order_binary_30d
  FROM
    (
    SELECT 
     *
    FROM 
      dsv1069.final_assignments
    WHERE
      test_number = 'item_test_2'
    ) assignment
    LEFT OUTER JOIN
      (
      SELECT
      *
      FROM
        dsv1069.orders
      ) orders
    ON
      assignment.item_id = orders.item_id
  GROUP BY
    assignment.item_id,
    assignment.test_assignment
) order_item_level
GROUP BY
test_assignment

-- Use this table to 
-- compute view_binary for the 30 day window after the test_start_date
-- for the test named item_test_2

SELECT 
  test_assignment,
  COUNT(item_id)            AS items, 
  SUM(view_binary)          AS views,
  SUM(view_binary_30d)      AS views_30d
FROM 
(
  SELECT
    assignment.item_id,
    assignment.test_assignment,
    MAX(CASE WHEN views.event_time > assignment.test_start_date THEN 1 ELSE 0 END) AS view_binary,
    MAX(CASE WHEN (views.event_time > assignment.test_start_date 
                  AND DATE_PART('day', views.event_time - assignment.test_start_date) <= 30)
               THEN 1 ELSE 0 END)  AS view_binary_30d
  FROM
    (
    SELECT 
     *
    FROM 
      dsv1069.final_assignments
    WHERE
      test_number = 'item_test_2'
    ) assignment
    LEFT OUTER JOIN
      (
      SELECT
        event_id,
        event_time,
        parameter_name,
        CAST(parameter_value AS INT)
      FROM
        dsv1069.events
      WHERE
        event_name = 'view_item'
      AND
        parameter_name = 'item_id'
      ) views
    ON
      assignment.item_id = views.parameter_value
    GROUP BY
    assignment.item_id,
    assignment.test_assignment
) view_item_level
GROUP BY
test_assignment

--Use the https://thumbtack.github.io/abba/demo/abba.html to compute the lifts in metrics and the p-values for the binary metrics ( 30 day order binary and 30 day view binary) using a interval 95% confidence.

-- 30 day order binary
-- lift: -2.5%
-- p-value: .70

-- 30 day view binary
-- lift: 2.6%
-- p-value: .20
